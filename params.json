{"name":"Java接口技术 Copysome.GitHub.io","tagline":"感谢大牛们分享，以下内容纯属抄袭，敬请见谅海涵","body":"# copySome.github.io\r\n感谢大牛们分享，以下内容纯属抄袭，敬请见谅海涵\r\n\r\n\r\n1.RMI技术\r\n\r\n\r\n1.1 RMI技术介绍\r\n\r\nRMI全称是Remote Method Invocation－远程方法调用，Java RMI在JDK1.1中实现的，其威力就体现在它强大的开发分布式网络应用的能力上，是纯Java的网络分布式应用系统的核心解决方案之一。其实它可以被看作是RPC的Java版本。但是传统RPC并不能很好地应用于分布式对象系统。而Java RMI 则支持存储于不同地址空间的程序级对象之间彼此进行通信，实现远程对象之间的无缝远程调用。\r\n\r\nRMI目前使用Java远程消息交换协议JRMP（Java Remote Messaging Protocol）进行通信。由于JRMP是专为Java对象制定的，Java RMI具有Java的\"Write Once,Run Anywhere\"的优点，是分布式应用系统的百分之百纯Java解决方案。用Java RMI开发的应用系统可以部署在任何支持JRE（Java Run Environment Java，运行环境）的平台上。但由于JRMP是专为Java对象制定的，因此，RMI对于用非Java语言开发的应用系统的支持不足。不能与用非Java语言书写的对象进行通信。\r\n\r\nRMI可利用标准Java本机方法接口JNI与现有的和原有的系统相连接。RMI还可利用标准JDBC包与现有的关系数据库连接。RMI/JNI和RMI/JDBC相结合，可帮助您利用RMI与目前使用非Java语言的现有服务器进行通信，而且在您需要时可扩展Java在这些服务器上的使用。RMI可帮助您在扩展使用时充分利用Java的强大功能。\r\n\r\nJava RMI极大依赖于接口,在需要创建一个远程对象时,程序员通过传递一个接口来隐藏底层的实现细节.客户端得到的远程对象句柄正好与本地的根代码相连,由后者负责透过网络通信,这样一来,程序猿只关心如何通过自己的接口句柄发送消息.\r\n\r\n1.2 RMI远程方法调用的组成\r\n\r\n一个正常的RMI系统有下面几个部分组成\r\n・远程服务的接口定义 \r\n・远程服务接口的具体实现 \r\n・桩（Stub）和框架（Skeleton）文件 \r\n・一个运行远程服务的服务器 \r\n・一个RMI命名服务，它允许客户端去发现这个远程服务 \r\n・类文件的提供者（一个HTTP或者FTP服务器） \r\n・一个需要这个远程服务的客户端程序 \r\n\r\n方法调用从客户对象经占位程序（Stub)、远程引用层(Remote Reference Layer)和传输层（Transport Layer）向下，传递给主机，然后再次经传 输层，向上穿过远程调用层和骨干网（Skeleton），到达服务器对象。 占位程序扮演着远程服务器对象的代理的角色，使该对象可被客户激活。 远程引用层处理语义、管理单一或多重对象的通信，决定调用是应发往一个服务器还是多个。传输层管理实际的连接，并且追踪可以接受方法调用的远程对象。服务器端的骨干网完成对服务器对象实际的方法调用，并获取返回值。返回值向下经远程引用层、服务器端的传输层传递回客户端，再向上经传输层和远程调用层返回。最后，占位程序获得返回值。 \r\n\r\n要完成以上步骤需要有以下几个步骤： \r\n\r\n1、 生成一个远程接口 \r\n\r\n2、 实现远程对象(服务器端程序)\r\n\r\n3、 生成占位程序和骨干网(服务器端程序)\r\n\r\n4、 编写服务器程序 \r\n\r\n5、 编写客户程序 \r\n\r\n6、 注册远程对象 \r\n\r\n7、 启动远程对象 \r\n\r\n1.3 RMI远程方法调用的优点\r\n\r\n从最基本的角度看，RMI是Java的远程过程调用(RPC)机制。与传统的RPC系统相比，RMI具有若干优点，因为它是Java面向对象方法的一部分。传统的RPC系统采用中性语言，所以是最普通的系统--它们不能提供所有可能的目标平台所具有的功能。 \r\n\r\nRMI以Java为核心，可与采用本机方法与现有系统相连接。这就是说，RMI可采用自然、直接和功能全面的方式为您提供分布式计算技术，而这种技术可帮助您以不断递增和无缝的方式为整个系统添加Java功能。\r\n\r\nRMI的主要优点如下： \r\n\r\n面向对象：RMI可将完整的对象作为参数和返回值进行传递，而不仅仅是预定义的数据类型。也就是说，您可以将类似Java哈希表这样的复杂类型作为一个参数进行传递。而在目前的RPC系统中，您只能依靠客户机将此类对象分解成基本数据类型，然后传递这些数据类型，最后在服务器端重新创建哈希表。RMI则不需额外的客户程序代码(将对象分解成基本数据类型)，直接跨网传递对象。 \r\n\r\n可移动属性：RMI可将属性(类实现程序)从客户机移动到服务器，或者从服务器移到客户机。这样就能具备最大的灵活性，因为政策改变时只需要您编写一个新的Java类，并将其在服务器主机上安装一次即可。 \r\n\r\n设计方式：对象传递功能使您可以在分布式计算中充分利用面向对象技术的强大功能，如二层和三层结构系统。如果您能够传递属性，那么您就可以在您的解决方案中使用面向对象的设计方式。所有面向对象的设计方式无不依靠不同的属性来发挥功能，如果不能传递完整的对象--包括实现和类型--就会失去设计方式上所提供的优点。 \r\n\r\n安　　全：RMI使用Java内置的安全机制保证下载执行程序时用户系统的安全。RMI使用专门为保护系统免遭恶意小应用程序侵害而设计的安全管理程序，可保护您的系统和网络免遭潜在的恶意下载程序的破坏。在情况严重时，服务器可拒绝下载任何执行程序。 \r\n\r\n便于编写和使用：RMI使得Java远程服务程序和访问这些服务程序的Java客户程序的编写工作变得轻松、简单。远程接口实际上就是Java接口。服务程序大约用三行指令宣布本身是服务程序，其它方面则与任何其它Java对象类似。这种简单方法便于快速编写完整的分布式对象系统的服务程序，并快速地制做软件的原型和早期版本，以便于进行测试和评估。因为RMI程序编写简单，所以维护也简单。 \r\n\r\n可连接现有/原有的系统：RMI可通过Java的本机方法接口JNI与现有系统进行进行交互。利用RMI和JNI，您就能用Java语言编写客户端程序，还能使用现有的服务器端程序。在使用RMI/JNI与现有服务器连接时，您可以有选择地用Java重新编写服务程序的任何部分，并使新的程序充分发挥Java的功能。类似地，RMI可利用JDBC、在不修改使用数据库的现有非Java源代码的前提下与现有关系数据库进行交互。 \r\n\r\n编写一次，到处运行：RMI是Java“编写一次，到处运行 ”方法的一部分。任何基于RMI的系统均可100%地移植到任何Java虚拟机上，RMI/JDBC系统也不例外。如果使用RMI/JNI与现有系统进行交互工作,则采用JNI编写的代码可与任何Java虚拟机进行编译、运行。 \r\n\r\n分布式垃圾收集：RMI采用其分布式垃圾收集功能收集不再被网络中任何客户程序所引用的远程服务对象。与Java 虚拟机内部的垃圾收集类似，分布式垃圾收集功能允许用户根据自己的需要定义服务器对象，并且明确这些对象在不再被客户机引用时会被删除。 \r\n\r\n并行计算：RMI采用多线程处理方法，可使您的服务器利用这些Java线程更好地并行处理客户端的请求。Java分布式计算解决方案：RMI从JDK 1.1开始就是Java平台的核心部分，因此，它存在于任何一台1.1 Java虚拟机中。所有RMI系统均采用相同的公开协议，所以，所有Java 系统均可直接相互对话，而不必事先对协议进行转换。\r\n\r\n1.4 RMI和CORBA的关系\r\n\r\nRMI 和 CORBA 常被视为相互竞争的技术，因为两者都提供对远程分布式对象的透明访问。但这两种技术实际上是相互补充的，一者的长处正好可以弥补另一者的短处。RMI 和 CORBA 的结合产生了 RMI-IIOP，RMI-IIOP 是企业服务器端 Java 开发的基础。1997 年，IBM 和 Sun Microsystems启动了一项旨在促进 Java 作为企业开发技术的发展的合作计划。两家公司特别着力于如何将 Java 用作服务器端语言，生成可以结合进现有体系结构的企业级代码。所需要的就是一种远程传输技术，它兼有 Java 的 RMI（Remote Method Invocation，远程方法调用）较少的资源占用量和更成熟的 CORBA（Common Object Request Broker Architecture，公共对象请求代理体系结构）技术的健壮性。出于这一需要，RMI-IIOP问世了，它帮助将 Java 语言推向了目前服务器端企业开发的主流语言的领先地位。 \r\n（来源：sun；matrix.org.cn）\r\n\r\n1.5 实例\r\n1)定义一个远程接口 IHello.java\r\n\r\nimport java.rmi.Remote;\r\n\r\npublic interface IHello extends Remote {\r\n\r\npublic String sayHello(String name) throws java.rmi.RemoteException;\r\n\r\n}\r\n\r\n2)实现远程的接口(服务端就在此远程接口的实现类中) HelloImpl.java\r\n\r\nimport java.rmi.RemoteException;\r\nimport java.rmi.server.UnicastRemoteObject;\r\npublic class HelloImpl extends UnicastRemoteObject implements IHello {\r\n    // 这个实现必须有一个显式的构造函数，并且要抛出一个RemoteException异常  \r\n    protected HelloImpl() throws RemoteException {\r\n        super();\r\n    }\r\n    /**\r\n     * 说明清楚此属性的业务含义\r\n     */\r\n    private static final long serialVersionUID = 4077329331699640331L;\r\n    public String sayHello(String name) throws RemoteException {\r\n        return \"Hello \" + name + \" ^_^ \";\r\n    }\r\n    public static void main(String[] args) {\r\n        try {\r\n            IHello hello = new HelloImpl();\r\n            java.rmi.Naming.rebind(\"rmi://localhost:1099/hello\", hello);\r\n            System.out.print(\"Ready\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\n3)新建一个RMI客户端调用程序 Hello_RMI_Client.java\r\n\r\nimport java.rmi.Naming;\r\npublic class Hello_RMI_Client {\r\n    public static void main(String[] args) {\r\n        try {\r\n            IHello hello = (IHello) Naming.lookup(\"rmi://localhost:1099/hello\");\r\n                System.out.println(hello.sayHello(\"zhangxianxin\"));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\n4)编译并运行\r\n\r\n4.1 用javac命令编译IHello.java、HelloImpl.java、Hello_RMI_Client.java\r\n\r\n>javac *.java\r\n\r\n4.2 用rmic命令生成桩和框架文件\r\n\r\n >rmic HelloImpl\r\n\r\n成功执行完上面的命令可以发现生成一个HelloImpl_stub.class文件，如果JDK是使用Java2SDK，那么还可以发现多出一个HelloImpl_Skel.class文件。如果服务端程序与客户端程序在同一台机器上并在同一目录中，则可以省略掉接口实现类生成的桩和框架文件，但这就失去了使用RMI的意义，而如果要在不同的JVM上运行时，客户端程序就必须得依靠服务端运程方法实现的桩和框架文件以及接口类。\r\n\r\n4.3 运行注册程序RMIRegistry，必须在包含刚写的类的目录下运行这个注册程序。\r\n\r\n>rmiregistry\r\n\r\n注册程序开始运行了，不要管他，现在切换到另外一个控制台运行服务器 \r\n\r\n4.4 运行服务器HelloImpl\r\n\r\n>java HelloImpl\r\n\r\n当启动成功出现Ready...... 这个服务器就开始工作了，把接口的实现加载到内存等待客户端的联接。现在切换到第三个控制台，启动我们的客户端。\r\n\r\n4.5 启动客户端:为了在其他的机器运行客户端程序你需要一个远程接口(IHello.class) 和一个stub(HelloImpl_Stub.class)。 使用如下命令运行客户端\r\n\r\n>java Hello_RMI_Client\r\n\r\n当运行成功会在控制台打印：Hello zhangxianxin ^_^\r\n\r\n\r\n备注：如果不想在控制台上开启RMI注册程序RMIRegistry的话，可在RMI服务类程序中添加LocateRegistry.createRegistry(1099); 如下所示：\r\n\r\n修改后的HelloImpl.java代码如下：\r\n\r\nimport java.rmi.RemoteException;\r\nimport java.rmi.registry.LocateRegistry;\r\nimport java.rmi.server.UnicastRemoteObject;\r\npublic class HelloImpl extends UnicastRemoteObject implements IHello {\r\n    // 这个实现必须有一个显式的构造函数，并且要抛出一个RemoteException异常  \r\n    protected HelloImpl() throws RemoteException {\r\n        super();\r\n    }\r\n    \r\n    private static final long serialVersionUID = 4077329331699640331L;\r\n    public String sayHello(String name) throws RemoteException {\r\n        return \"Hello \" + name + \" ^_^ \";\r\n    }\r\n    public static void main(String[] args) {\r\n        try {\r\n            IHello hello = new HelloImpl();\r\n            LocateRegistry.createRegistry(1099); //加上此程序，就可以不要在控制台上开启RMI的注册程序，1099是RMI服务监视的默认端口\r\n            java.rmi.Naming.rebind(\"rmi://localhost:1099/hello\", hello);\r\n            System.out.print(\"Ready\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    }\r\n\r\n1.6简单实例二\r\n\r\n\r\n以下用一个文件交换程序来介绍RMI的应用。这个应用允许客户端从服务端交换(或下载)所有类型的文件。第一步是定义一个远程的接口，这个接口指定的签名方法将被服务端提供和被客户端调用。\r\n\r\n1．定义一个远程接口 \r\n\r\nIFileUtil.java代码如下: \r\n\r\n\r\nimport java.rmi.Remote;\r\n\r\nimport java.rmi.RemoteException;\r\n\r\npublic interface IFileUtil extends Remote {\r\n\r\npublic byte[] downloadFile(String fileName) throws RemoteException;\r\n\r\n}\r\n接口IFileDownload提供了一个downloadFile方法，然后返回一个相应的文件数据。\r\n\r\n\r\n2．实现远程的接口 \r\n　　类FileImpl继承于UnicastRemoteObject类。这显示出FileImpl类是用来创建一个单独的、不能复制的、远程的对象，这个对象使用RMI默认的基于TCP的通信方式。\r\n\r\nFileUtilImpl.java代码如下:\r\n\r\n\r\nimport java.io.BufferedInputStream;\r\n\r\nimport java.io.File;\r\n\r\nimport java.io.FileInputStream;\r\n\r\nimport java.rmi.RemoteException;\r\n\r\nimport java.rmi.server.UnicastRemoteObject;\r\n\r\npublic class FileUtilImpl extends UnicastRemoteObject implements IFileUtil {\r\n\r\nprotected FileUtilImpl() throws RemoteException {\r\n\r\nsuper();\r\n\r\n}\r\n\r\nprivate static final long serialVersionUID = 7594622080290821912L;\r\n\r\npublic byte[] downloadFile(String fileName) throws RemoteException{\r\n\r\nFile file = new File(fileName);\r\n\r\nbyte buffer[] = new byte[(int) file.length()];\r\n\r\nint size = buffer.length;\r\n\r\nSystem.out.println(\"download file size = \"+size +\"b\");\r\n\r\nif(size>1024*1024*10){//限制文件大小不能超过10M，文件太大可能导制内存溢出！\r\n\r\nthrow new RemoteException(\"Error:<The File is too big!>\");\r\n\r\n}\r\n\r\ntry {\r\n\r\nBufferedInputStream input = new BufferedInputStream(\r\n\r\nnew FileInputStream(fileName));\r\n\r\ninput.read(buffer, 0, buffer.length);\r\n\r\ninput.close();\r\n\r\nSystem.out.println(\"Info:<downloadFile() hed execute successful!>\");\r\n\r\nreturn buffer;\r\n\r\n} catch (Exception e) {\r\n\r\nSystem.out.println(\"FileUtilImpl: \" + e.getMessage());\r\n\r\ne.printStackTrace();\r\n\r\nreturn null;\r\n\r\n}\r\n\r\n}\r\n\r\n}\r\n\r\n\r\n3．编写服务端 \r\n\r\n（1)创建并安装一个RMISecurityManager实例。\r\n\r\n（2)创建一个远程对象的实例。\r\n\r\n（3)使用RMI注册工具来注册这个对象。\r\n\r\nFileUtilServer.java 代码如下：\r\n\r\nimport java.rmi.Naming;\r\n\r\nimport java.rmi.RMISecurityManager;\r\n\r\npublic class FileUtilServer {\r\n\r\npublic static void main(String argv[]) {\r\n\r\ntry {\r\n\r\nIFileUtil file = new FileUtilImpl();\r\n\r\n//LocateRegistry.createRegistry(1099); //加上此程序，就可以不要在控制台上开启RMI的注册程序，1099是RMI服务监视的默认端口\r\n\r\nNaming.rebind(\"rmi://127.0.0.1/FileUtilServer\", file);\r\n\r\nSystem.out.print(\"Ready\");\r\n\r\n} catch (Exception e) {\r\n\r\nSystem.out.println(\"FileUtilServer: \" + e.getMessage());\r\n\r\ne.printStackTrace();\r\n\r\n}\r\n}\r\n}\r\n声明Naming.rebind(\"rmi://127.0.0.1/FileUtilServer\", file) 中假定了RMI注册工具(RMI registry )使用并启动了1099端口。如果在其他端口运行了RMI注册工具，则必须在这个声明中定义。例如，如果RMI注册工具在4500端口运行，则声明应为：　　Naming.rebind(\"rmi://127.0.0.1:4500/FileUtilServer\", file) \r\n\r\n另外我们已经同时假定了我们的服务端和RMI注册工具是运行在同一台机器上的。否则需要修改rebind方法中的地址。\r\n\r\n\r\n\r\n\r\n4．编写客户端 \r\n\r\n客户端可以远程调用远程接口(FileInterface)中的任何一个方法。无论如何实现，客户端必须先从RMI注册工具中获取一个远程对象的引用。当引用获得后，方法downloadFile被调用。在执行过程中，客户端从命令行中获得两个参数，第一个是要下载的文件名,第二个是要下载的机器的地址，在对应地址的机器上运行服务端。\r\n\r\nFileUtilClient.java 代码如下：\r\n\r\nimport java.io.BufferedOutputStream;\r\n\r\nimport java.io.File;\r\n\r\nimport java.io.FileOutputStream;\r\n\r\nimport java.rmi.Naming;\r\n\r\npublic class FileUtilClient {\r\n\r\npublic static void main(String args[]) {\r\n\r\nif (args.length != 3) {\r\n\r\nSystem.out.println(\"第一个参数：RMI服务的IP地址\");\r\n\r\nSystem.out.println(\"第二个参数：要下载的文件名\");\r\n\r\nSystem.out.println(\"第三个参数：要文件保存位置\");\r\n\r\nSystem.exit(0);\r\n\r\n}\r\n\r\ntry {\r\n\r\nString name = \"rmi://\" + args[0] + \"/FileUtilServer\";\r\n\r\nIFileUtil fileUtil = (IFileUtil) Naming.lookup(name);\r\n\r\nbyte[] filedata = fileUtil.downloadFile(args[1]);\r\n\r\nif(filedata==null){\r\n\r\nSystem.out.println(\"Error：<filedata is null!>\");\r\n\r\nSystem.exit(0);\r\n\r\n}\r\n\r\nFile file = new File(args[2]);\r\n\r\nSystem.out.println(\"file.getAbsolutePath() = \"+file.getAbsolutePath());\r\n\r\nBufferedOutputStream output = new BufferedOutputStream(\r\n\r\nnew FileOutputStream(file.getAbsolutePath()));\r\n\r\noutput.write(filedata, 0, filedata.length);\r\n\r\noutput.flush();\r\n\r\noutput.close();\r\n\r\nSystem.out.println(\"~~~~~End~~~~~\");\r\n\r\n} catch (Exception e) {\r\n\r\nSystem.err.println(\"FileUtilServer exception: \" + e.getMessage());\r\n\r\ne.printStackTrace();\r\n\r\n}\r\n\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n5．运行程序\r\n为了运行程序，我们必须使用rmic来编译生成stubs和skeletons:\r\n\r\n>rmic FileUtilImpl\r\n\r\n这将会生成FileUtilImpl_Stub.class和FileUtilImpl_Skel.class两个文件。stub是客户端的代理，而skeleton是服务端的框架。服务端和客户端采用javac来编译（如果服务端和客户端在两个不同的机器，则必须复制一个IFileUtil接口）。\r\n\r\n使用rmiregistry或者start rmiregistry 命令来运行RMI注册工具到window系统默认的端口上：\r\n> rmiregistry portNumber\r\n此处的portNumber为端口,RMI注册工具运行之后，需要运行服务FileUtilServer，因为RMI的安全机制将在服务端发生作用,所以必须增加一条安全策略： grant{permission java.security.AllPermission \"\", \"\";};\r\n\r\n为了运行服务端，需要有除客户类(FileUtilClient.class)之外所有的类文件。确认安全策略在policy.txt文件之后,使用如下命令来运行服务器。\r\n> java -Djava.security.policy=policy.txt FileUtilServer\r\n\r\n为了在其他的机器运行客户端程序,需要一个远程接口(IFileUtil.class)和一个stub(FileUtilImpl_Stub.class)。 使用如下命令运行客户端:\r\n> java FileUtilClient fileName machineName savePath\r\n　　这里fileName是要下载的文件名,machineName 是要下载的文件所在的机器(也是服务端所在的机器),savePath 是要将下载过来的文件保存的路径（带文件名）。如果全部通过的话,当客户端运行后，则这个文件将被下载到本地。\r\n\r\n1.7 Spring对RMI的支持\r\n\r\n1.使用RMI暴露服务\r\n\r\n使用Spring的RMI支持，你可以通过RMI基础设施透明的暴露你的服务。设置好Spring的RMI支持后，你会看到一个和远程EJB接口类似的配置，只是没有对安全上下文传递和远程事务传递的标准支持。当使用RMI调用器时，Spring对这些额外的调用上下文提供了钩子，你可以在此插入安全框架或者定制的安全证书。\r\n\r\n\r\n\r\n\r\n2. 使用 RmiServiceExporter 暴露服务\r\n\r\n使用 RmiServiceExporter，我们可以把AccountService对象的接口暴露成RMI对象。可以使用 RmiProxyFactoryBean 或者在传统RMI服务中使用普通RMI来访问该接口。RmiServiceExporter 显式地支持使用RMI调用器暴露任何非RMI的服务。 \r\n\r\n当然，我们首先需要在Spring BeanFactory中设置我们的服务： \r\n\r\n<bean id=\"accountService\" class=\"example.AccountServiceImpl\">\r\n\r\n    <!-- any additional properties, maybe a DAO? -->\r\n\r\n</bean>\r\n然后，我们将使用 RmiServiceExporter 来暴露我们的服务： \r\n\r\n\r\n<bean class=\"org.springframework.remoting.rmi.RmiServiceExporter\">\r\n\r\n<!-- does not necessarily have to be the same name as the bean to be exported -->\r\n\r\n<property name=\"serviceName\" value=\"AccountService\"/>\r\n\r\n<property name=\"service\" ref=\"accountService\"/>\r\n\r\n<property name=\"serviceInterface\" value=\"example.AccountService\"/>\r\n\r\n<!-- defaults to 1099 -->\r\n\r\n<property name=\"registryPort\" value=\"1199\"/>\r\n\r\n</bean>\r\n正如你所见，我们覆盖了RMI注册的端口号。通常，你的应用服务也会维护RMI注册，最好不要和它冲突。更进一步来说，服务名是用来绑定下面的服务的。所以本例中，服务绑定在 rmi://HOST:1199/AccountService。在客户端我们将使用这个URL来链接到服务。 \r\n\r\n注意：我们省略了一个属性，就是 servicePort 属性，它的默认值为0。 这表示在服务通信时使用匿名端口。当然如果你愿意的话，也可以指定一个不同的端口。 \r\n\r\n\r\n\r\n\r\n3. 在客户端链接服务\r\n\r\n我们的客户端是一个使用AccountService来管理account的简单对象： \r\n\r\npublic class SimpleObject {\r\n\r\n  private AccountService accountService;\r\n\r\n  public void setAccountService(AccountService accountService) {\r\n\r\n    this.accountService = accountService;\r\n\r\n  }\r\n\r\n}\r\n为了把服务连接到客户端上，我们将创建另一个单独的bean工厂，它包含这个简单对象和服务链接配置位： \r\n\r\n<bean class=\"example.SimpleObject\">\r\n\r\n<property name=\"accountService\" ref=\"accountService\"/>\r\n\r\n</bean>\r\n\r\n<bean id=\"accountService\" class=\"org.springframework.remoting.rmi.RmiProxyFactoryBean\">\r\n\r\n<property name=\"serviceUrl\" value=\"rmi://HOST:1199/AccountService\"/>\r\n\r\n<property name=\"serviceInterface\" value=\"example.AccountService\"/>\r\n\r\n</bean>\r\n这就是我们在客户端为支持远程account服务所需要做的。Spring将透明的创建一个调用器并且通过RmiServiceExporter使得account服务支持远程服务。在客户端，我们用RmiProxyFactoryBean连接它。\r\n\r\n\r\n1.8 Spring对RMI支持的实际应用实例\r\n\r\n在OMAS系统中提供给业务系统的RMI客户反馈服务的实现服务暴露是通过Resource/modules/interfaces/spring-conf/serviceContext.xml配置文件实现的，而远程接口的实现类必须序列化（即实现Serializable接口）。\r\n\r\nResource/modules/interfaces/spring-conf/serviceContext.xml的内容如下：\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\" \"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\r\n\r\n<beans default-autowire=\"byName\" default-lazy-init=\"false\">\r\n\r\n<!-- service实现类的配置 -->\r\n\r\n<bean id=\"fbWebService\" class=\"com.ce.omas.interfaces.service.impl.FeedbackWebServiceImpl\" />\r\n\r\n<bean class=\"org.springframework.remoting.rmi.RmiServiceExporter\">\r\n\r\n<!-- does not necessarily have to be the same name as the bean to be exported -->\r\n\r\n<property name=\"serviceName\" value=\"FeedbackRMIService\" />\r\n\r\n<property name=\"service\" ref=\"fbWebService\" />\r\n\r\n<property name=\"serviceInterface\" value=\"com.ce.omas.interfaces.service.IFeedbackWebService\" />\r\n\r\n<!-- <property name=\"registryHost\" value=\"rmi://192.168.100.7\"/> -->\r\n\r\n<!-- defaults to 1099 -->\r\n\r\n<property name=\"registryPort\" value=\"1199\" />\r\n\r\n</bean>\r\n\r\n</beans>\r\n\r\n\r\n\r\n对应的暴露的服务接口如下：\r\n\r\npublic interface IFeedbackWebService {\r\n\r\n/**\r\n\r\n * <b>方法用途和描述:</b> 客户反馈RMI服务端接口方法<br>\r\n\r\n * <b>方法的实现逻辑描述：</b> 通过RMI提供服务，Spring支持的RMI远程调用\r\n\r\n * @param systemID : 业务系统的唯一标识\r\n\r\n * @param feedbackType ：用户反馈的类型（1-系统BUG、2-系统易用性、3-客服人员态度、4-运维人员态度、5-其他）\r\n\r\n * @param feedbackContent ：用户反馈的正文内容\r\n\r\n * @return 反馈是否成功 true | false\r\n\r\n */\r\n\r\npublic boolean setFeedback(String systemID, FeedbackType feedbackType,\r\n\r\nString feedbackContent) throws OMASServiceException ;\r\n\r\n}\r\n\r\n\r\n\r\n暴露的服务接口实现如下：\r\n\r\npublic class FeedbackWebServiceImpl implements IFeedbackWebService,  Serializable {\r\n\r\nprivate static Log _log = LogFactory.getLog(FeedbackWebServiceImpl.class);\r\n\r\nprivate static final long serialVersionUID = -5532505108644974594L;\r\n\r\n/**\r\n\r\n * 客户反馈服务接口\r\n\r\n */\r\n\r\nprivate IFeedbackOperationService feedbackService;\r\n\r\n/**\r\n\r\n* 方法用途和描述: 注入运营模块的添加客户反馈的服务\r\n\r\n* @param feedbackWebService 运营模块服务\r\n\r\n */\r\n\r\npublic void setFeedbackService(IFeedbackOperationService feedbackWebService) {\r\n\r\n_log.info(\"注入运营模块的添加客户反馈的服务\");\r\n\r\nthis.feedbackService = feedbackWebService;\r\n\r\n}\r\n\r\n/**\r\n\r\n* 方法用途和描述: 外部接口子系统中添加客户反馈的方法\r\n\r\n* @param systemID ：业务系统ID\r\n\r\n* @param feedbackType ：反馈类型\r\n\r\n* @param feedbackContent ：反馈内容\r\n\r\n* @return 操作是否成功 ture or false\r\n\r\n * @throws ServiceException \r\n\r\n */\r\n\r\npublic boolean setFeedback(String systemID, FeedbackType feedbackType, String feedbackContent) throws OMASServiceException {\r\n\r\n_log.info(\"进入到外部接口的添加客户反馈的方法\");\r\n\r\nif (BlankUtil.isBlank(systemID) || BlankUtil.isBlank(feedbackType)\r\n\r\n|| BlankUtil.isBlank(feedbackContent)) {\r\n\r\n_log.error(\"添加客户反馈的接口参数为空！\");\r\n\r\nthrow new OMASServiceException(\"omas.interfaces.001\");//添加客户反馈的接口参数为空\r\n\r\n}\r\n\r\nWebServiceFeedbackVO vo = new WebServiceFeedbackVO();\r\n\r\nvo.setFeedbackType(String.valueOf(feedbackType.getValue()));\r\n\r\nvo.setFeedbackContent(feedbackContent);\r\n\r\nvo.setSystemID(systemID);\r\n\r\n_log.info(\"调用运营子系统的添加客户反馈的方法开始！\");\r\n\r\ntry {\r\n\r\nif (feedbackService == null) {\r\n\r\n_log.error(\"运营模块服务为空\");\r\n\r\nthrow new OMASServiceException(\"omas.interfaces.002\");//运营模块服务为空\r\n\r\n}\r\n\r\nfeedbackService.addFeedbackOperation(vo);\r\n\r\n} catch (ServiceException e) {\r\n\r\n_log.error(\"调用运营子系统的添加客户反馈出现异常：\"+e.getMessage());\r\n\r\nif(ExceptionConstants.EXCEPTION_OMAS_FEEDBACK_VO.equals(e.getMsgKey())){//客户调用接口的对像为空\r\n\r\nthrow new OMASServiceException(\"omas.interfaces.003\");\r\n\r\n} if(ExceptionConstants.EXCEPTION_OMAS_FEEDBACK_SYSTEMID.equals(e.getMsgKey())){//业务系统标识ID为空\r\n\r\nthrow new OMASServiceException(\"omas.omasservice.010\");\r\n\r\n} if(ExceptionConstants.EXCEPTION_OMAS_FEEDBACK_SIZE.equals(e.getMsgKey())){//非法的业务系统唯一标识\r\n\r\nthrow new OMASServiceException(\"omas.interfaces.004\");\r\n\r\n} if(ExceptionConstants.EXCEPTION_OMAS_FEEDBACK_BASE.equals(e.getMsgKey())){//数据库访问出了一点小问题！\r\n\r\nthrow new OMASServiceException(\"omas.interfaces.005\");\r\n\r\n}\r\n\r\nthrow new OMASServiceException(\"omas.omasservice.000\");//未捕获到的异常信息！\r\n\r\n}\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n}\r\n\r\n接口方法setFeedback（String, FeedbackType, String）的实现大家不用关心，其与RMI并无关系，只是一些纯业务处理逻辑而已，要注意的是接口实现类必须实现 IfeedbackWebService和Serializable接口。\r\n\r\n\r\n在客户本地的omasservice.jar包中客户反馈的RMI客户端的配置如下：\r\n\r\nResource/config/omasrmi-client.xml\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\" \"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\r\n\r\n<beans default-autowire=\"byName\" default-lazy-init=\"true\">\r\n\r\n<bean id=\"fbWebServiceProxy\"\r\n\r\nclass=\"org.springframework.remoting.rmi.RmiProxyFactoryBean\">\r\n\r\n<property name=\"serviceUrl\">\r\n\r\n<value>rmi://127.0.0.1:1199/FeedbackRMIService</value>\r\n\r\n</property>\r\n\r\n<property name=\"serviceInterface\">\r\n\r\n<value>com.ce.omas.interfaces.service.IFeedbackWebService</value>\r\n\r\n</property>\r\n\r\n</bean>\r\n\r\n<bean class=\"com.ce.omas.omasservice.service.impl.FeedbackRMIClientImpl\">\r\n\r\n<property name=\"feedbackWebService\" ref=\"fbWebServiceProxy\" />\r\n\r\n</bean>\r\n\r\n</beans>\r\n\r\n\r\n\r\n\r\n客户端调用RMI服务的方法如下所示：\r\n\r\n/**\r\n\r\n* 方法用途和描述: 客户反馈：通过RMI方法与OMAS通讯\r\n\r\n* 方法的实现逻辑描述：\r\n\r\n* @param feedbackType\r\n\r\n* @param feedbackContent\r\n\r\n* @return\r\n\r\n* @throws OMASServiceException\r\n\r\n*/\r\n\r\npublic static boolean setFeedback_RMIClient(String systemID, FeedbackType feedbackType, String feedbackContent) throws OMASServiceException {\r\n\r\nif (systemID == null || \"\".equals(systemID)) {\r\n\r\n_log.error(\"业务系统标识<SystemID>为空或不是对象\");\r\n\r\nthrow new OMASServiceException(\"omas.omasservice.010\");\r\n\r\n}\r\n\r\nString rmiClientConfigFilePath = PropertyReader .getValue(ConfigConstants.OMASSERVICE_CONFIG_PATH, ConfigConstants.RMI_CLIENT_CONFIG_FILEPATH);\r\n\r\nif (rmiClientConfigFilePath == null || \"\".equals(rmiClientConfigFilePath)) {\r\n\r\n_log.error(\"配置文件错误：Key<rmiClientConfigFile>为空或不存在\");\r\n\r\nthrow new OMASServiceException(\"omas.omasservice.006\");\r\n\r\n}\r\n\r\n_log.info(\"rmiClientConfigPath = \" + rmiClientConfigFilePath);\r\n\r\nApplicationContext context = null;\r\n\r\ntry {\r\n\r\ncontext = new ClassPathXmlApplicationContext(rmiClientConfigFilePath);\r\n\r\n} catch (Exception e) {\r\n\r\n_log.error(\"客户反馈：解析rmi-config.xml文件时出现异常：\" + e);\r\n\r\n_log.info(\"rmi-config.xml文件路径：\"+rmiClientConfigFilePath);\r\n\r\nthrow new OMASServiceException(\"omas.omasservice.007\");\r\n\r\n}\r\n\r\nIFeedbackWebService service = null;\r\n\r\ntry {\r\n\r\nservice = (IFeedbackWebService) context .getBean(\"fbWebServiceProxy\");\r\n\r\n} catch (Exception e) {\r\n\r\n_log.error(\"从Spring的RMI客户端Bean配置文件获取服务对象时出现异常：\" + e);\r\n\r\nthrow new OMASServiceException(\"omas.omasservice.009\");\r\n\r\n}\r\n\r\nboolean bln = service.setFeedback(systemID, feedbackType, feedbackContent);\r\n\r\n_log.info(\"反馈操作是否成功[true|false]：\" + bln);\r\n\r\nreturn bln;\r\n\r\n}\r\n\r\n2.Hessian\r\n\r\n\r\n3.WebService","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}